{"ast":null,"code":"export const loginUser = (name, password) => {\n  return (\n    /*FUNCTION*/\n    dispatch => {\n      console.log(process.env.REACT_APP_yAPI_ENDPOINT);\n      dispatch(authenticatingUser());\n      fetch('http://localhost:4000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            name: name,\n            password: password\n          }\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      }).then(({\n        user,\n        jwt\n      }) => {\n        localStorage.setItem('jwt', jwt);\n        dispatch(setCurrentUser(user));\n      }).catch(r => r.json().then(e => dispatch(failedLogin(e.message))));\n    }\n  );\n};\nexport const fetchCurrentUser = () => {\n  return dispatch => {\n    dispatch(authenticatingUser());\n    fetch('http://localhost:4000/profile', {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(response => response.json()).then(({\n      user\n    }) => dispatch(setCurrentUser(user)));\n  };\n};\nexport const setCurrentUser = userData => ({\n  type: 'SET_CURRENT_USER',\n  payload: userData\n});\nexport const failedLogin = errorMsg => ({\n  type: 'FAILED_LOGIN',\n  payload: errorMsg\n}); // tell our app we're currently fetching\n\nexport const authenticatingUser = () => ({\n  type: 'AUTHENTICATING_USER'\n});","map":{"version":3,"sources":["/Users/marijastojanovic/Desktop/Work/mod4Project_frontend/src/actions/User.js"],"names":["loginUser","name","password","dispatch","console","log","process","env","REACT_APP_yAPI_ENDPOINT","authenticatingUser","fetch","method","headers","Accept","body","JSON","stringify","user","then","response","ok","json","jwt","localStorage","setItem","setCurrentUser","catch","r","e","failedLogin","message","fetchCurrentUser","Authorization","getItem","userData","type","payload","errorMsg"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC3C;AAAO;AAAcC,IAAAA,QAAD,IAAc;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,uBAAxB;AACAL,MAAAA,QAAQ,CAACM,kBAAkB,EAAnB,CAAR;AACAC,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD,SAF0B;AAMnCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,IAAI,EAAE;AACJhB,YAAAA,IAAI,EAAEA,IADF;AAEJC,YAAAA,QAAQ,EAAEA;AAFN;AADa,SAAf;AAN6B,OAAhC,CAAL,CAaGgB,IAbH,CAaQC,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,SAFD,MAEO;AACL,gBAAMF,QAAN;AACD;AACF,OAnBH,EAoBGD,IApBH,CAoBQ,CAAC;AAAED,QAAAA,IAAF;AAAQK,QAAAA;AAAR,OAAD,KAAmB;AACvBC,QAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,GAA5B;AACAnB,QAAAA,QAAQ,CAACsB,cAAc,CAACR,IAAD,CAAf,CAAR;AACD,OAvBH,EAwBGS,KAxBH,CAwBSC,CAAC,IAAIA,CAAC,CAACN,IAAF,GAASH,IAAT,CAAcU,CAAC,IAAIzB,QAAQ,CAAC0B,WAAW,CAACD,CAAC,CAACE,OAAH,CAAZ,CAA3B,CAxBd;AAyBD;AA5BD;AA6BD,CA9BM;AAgCP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,SAAQ5B,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACM,kBAAkB,EAAnB,CAAR;AACAC,IAAAA,KAAK,CAAC,+BAAD,EAAkC;AACrCC,MAAAA,MAAM,EAAE,KAD6B;AAErCC,MAAAA,OAAO,EAAE;AACPoB,QAAAA,aAAa,EAAG,UAAST,YAAY,CAACU,OAAb,CAAqB,KAArB,CAA4B;AAD9C;AAF4B,KAAlC,CAAL,CAMGf,IANH,CAMQC,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EANpB,EAOGH,IAPH,CAOQ,CAAC;AAAED,MAAAA;AAAF,KAAD,KAAcd,QAAQ,CAACsB,cAAc,CAACR,IAAD,CAAf,CAP9B;AASD,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMQ,cAAc,GAAIS,QAAD,KAAe;AAC3CC,EAAAA,IAAI,EAAE,kBADqC;AAE3CC,EAAAA,OAAO,EAAEF;AAFkC,CAAf,CAAvB;AAKP,OAAO,MAAML,WAAW,GAAIQ,QAAD,KAAe;AACxCF,EAAAA,IAAI,EAAE,cADkC;AAExCC,EAAAA,OAAO,EAAEC;AAF+B,CAAf,CAApB,C,CAKP;;AACA,OAAO,MAAM5B,kBAAkB,GAAG,OAAO;AAAE0B,EAAAA,IAAI,EAAE;AAAR,CAAP,CAA3B","sourcesContent":["export const loginUser = (name, password) => {\n  return /*FUNCTION*/ (dispatch) => {\n    console.log(process.env.REACT_APP_yAPI_ENDPOINT)\n    dispatch(authenticatingUser())\n    fetch('http://localhost:4000/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          name: name,\n          password: password\n        }\n      })\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw response\n        }\n      })\n      .then(({ user, jwt }) => {\n        localStorage.setItem('jwt', jwt)\n        dispatch(setCurrentUser(user))\n      })\n      .catch(r => r.json().then(e => dispatch(failedLogin(e.message))))\n  }\n}\n\nexport const fetchCurrentUser = () => {\n  return (dispatch) => {\n    dispatch(authenticatingUser())\n    fetch('http://localhost:4000/profile', {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('jwt')}`\n      }\n    })\n      .then(response => response.json())\n      .then(({ user }) => dispatch(setCurrentUser(user)))\n      \n  }\n}\n\nexport const setCurrentUser = (userData) => ({\n  type: 'SET_CURRENT_USER',\n  payload: userData\n})\n\nexport const failedLogin = (errorMsg) => ({\n  type: 'FAILED_LOGIN',\n  payload: errorMsg\n})\n\n// tell our app we're currently fetching\nexport const authenticatingUser = () => ({ type: 'AUTHENTICATING_USER' })"]},"metadata":{},"sourceType":"module"}